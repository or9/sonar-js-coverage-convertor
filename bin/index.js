#!/usr/bin/env node
"use strict";function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step("next",value)},function(err){step("throw",err)})}}return step("next")})}}const promisify=require("babel-promisify");const params=require("ara-cli-options");const{readFile,writeFile}=require("fs");const __readFile=promisify(readFile);const __writeFile=promisify(writeFile);const parser=new require("xml2js").Parser();const parseString=promisify(parser.parseString);const DIR=`${process.env.PWD}/coverage`;if(process.argv[2]==="help"||process.argv[2]==="-h"||process.argv[2]==="--help"){displayUsage()}const CLOVER_COVERAGE_LOCATION=params("--location","-l")||`${DIR}`;const runStyle=params("--style","-s")||"coverage";const generateGenericTestData=require(`./${runStyle}`);_asyncToGenerator(function*(){const fileContent=yield __readFile(`${CLOVER_COVERAGE_LOCATION}/clover.xml`);const parsedFileContent=yield parseString(fileContent);const fileOutputContent=yield generateGenericTestData(parsedFileContent);const result=yield __writeFile(`${CLOVER_COVERAGE_LOCATION}/sonar-report.xml`,fileOutputContent);console.info(`Successfully wrote coverage to ${CLOVER_COVERAGE_LOCATION}/sonar-report.xml`)})();function displayUsage(){console.info(`-l --location: [./coverage]
	             -s --style: [coverage]||execution`);process.exit(0)}